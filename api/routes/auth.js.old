import { Pool } from "@neondatabase/serverless";
import { initializeApp, cert } from "firebase-admin/app";
import { getAuth } from "firebase-admin/auth";

// Only initialize Firebase Admin once
const firebaseAdminApp = initializeApp({
  credential: cert({
    projectId: process.env.FIREBASE_PROJECT_ID,
    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
    privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'),
  }),
});

// Neon Postgres pool
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

export default {
  async fetch(request, env, ctx) {
    if (request.method !== "POST") {
      return new Response("Method Not Allowed", { status: 405 });
    }

    try {
      const { idToken } = await request.json();
      if (!idToken) {
        return new Response(JSON.stringify({ error: "Missing idToken" }), { status: 400 });
      }

      // Verify Firebase ID token
      const decoded = await getAuth(firebaseAdminApp).verifyIdToken(idToken);

      // Extract user info
      const { uid, email, name, picture } = decoded;

      // Upsert user in Postgres
      const upsertQuery = `
        INSERT INTO users (firebase_uid, email, name, picture)
        VALUES ($1, $2, $3, $4)
        ON CONFLICT (firebase_uid) DO UPDATE
        SET email = EXCLUDED.email, name = EXCLUDED.name, picture = EXCLUDED.picture
        RETURNING id, firebase_uid, email, name, picture
      `;
      const values = [uid, email, name, picture];
      const { rows } = await pool.query(upsertQuery, values);
      const user = rows[0];

      // Create a session token (JWT or similar)
      // For demo, we'll just use a simple JSON string (replace with JWT in production)
      const sessionToken = JSON.stringify({ id: user.id, email: user.email });

      // Set cookie (adjust options as needed)
      return new Response(JSON.stringify({ user }), {
        status: 200,
        headers: {
          "Set-Cookie": `token=${encodeURIComponent(sessionToken)}; Path=/; HttpOnly; Secure; SameSite=Strict`,
          "Content-Type": "application/json",
        },
      });
    } catch (err) {
      return new Response(JSON.stringify({ error: err.message }), { status: 401 });
    }
  }
};